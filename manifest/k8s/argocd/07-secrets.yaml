# argocd/07-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: argocd-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-secret
    app.kubernetes.io/part-of: argocd
type: Opaque
data:
  # Server secret key (base64 encoded random string)
  server.secretkey: ""  # Will be generated by deploy script

---
apiVersion: v1
kind: Secret
metadata:
  name: argocd-initial-admin-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-initial-admin-secret
    app.kubernetes.io/part-of: argocd
type: Opaque
data:
  # Initial admin password (base64 encoded)
  password: ""  # Will be generated by deploy script

---
# Secret for notifications credentials (empty by default)
apiVersion: v1
kind: Secret
metadata:
  name: argocd-notifications-secret
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications-secret
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/component: notifications-controller
type: Opaque
data:
  # Add your notification service credentials here
  # Example for Slack:
  # slack-token: <base64-encoded-slack-token>
  # Example for email:
  # email-username: <base64-encoded-email-username>
  # email-password: <base64-encoded-email-password>
# Missing TLS secrets (empty by default, can be populated later)
#apiVersion: v1
#kind: Secret
#metadata:
#  name: argocd-repo-server-tls
#  namespace: argocd
#  labels:
#    app.kubernetes.io/name: argocd-repo-server-tls
#    app.kubernetes.io/part-of: argocd
#    app.kubernetes.io/component: repo-server
#type: kubernetes.io/tls
#data:
#  tls.crt: ""
#  tls.key: ""
#  ca.crt: ""
---
#apiVersion: v1
#kind: Secret
#metadata:
#  name: argocd-server-tls
#  namespace: argocd
#  labels:
#    app.kubernetes.io/name: argocd-server-tls
#    app.kubernetes.io/part-of: argocd
#    app.kubernetes.io/component: server
#type: kubernetes.io/tls
#data:
#  tls.crt: ""
#  tls.key: ""
#  ca.crt: ""
---
#apiVersion: batch/v1
#kind: Job
#metadata:
#  name: argocd-generate-tls
#  namespace: argocd
#spec:
#  template:
#    spec:
#      restartPolicy: OnFailure
#      containers:
#      - name: generate-tls
#        image: alpine/openssl:latest
#        command:
#        - sh
#        - -c
#        - |
#          # Generate CA private key
#          openssl genrsa -out ca.key 2048
#
#          # Generate CA certificate
#          openssl req -new -x509 -days 365 -key ca.key -out ca.crt -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=argocd-ca"
#
#          # Generate server private key
#          openssl genrsa -out tls.key 2048
#
#          # Generate server certificate signing request
#          openssl req -new -key tls.key -out server.csr -subj "/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=argocd-repo-server"
#
#          # Generate server certificate
#          openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out tls.crt -days 365
#
#          # Create the secret
#          kubectl create secret tls argocd-repo-server-tls \
#            --cert=tls.crt \
#            --key=tls.key \
#            --namespace=argocd \
#            --dry-run=client -o yaml | kubectl apply -f -
#
#          # Add CA certificate to the secret
#          kubectl patch secret argocd-repo-server-tls -n argocd -p "{\"data\":{\"ca.crt\":\"$(base64 -w 0 ca.crt)\"}}"
#
#        volumeMounts:
#        - name: tmp
#          mountPath: /tmp
#      volumes:
#      - name: tmp
#        emptyDir: {}
#      serviceAccountName: argocd-server  # Needs permissions to create secrets